package com.example;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.is;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.stream.Collectors;

import org.junit.jupiter.api.Test;

import io.quarkus.test.junit.QuarkusTest;

@QuarkusTest
public class MathServiceTest {
    @Test
    public void testMathEndpoint() {
        given().when()
                .get("/math")
                .then()
                .statusCode(200)
                .body(is("41"));
    }

    @Test
    public void testBuiltinsMjsFileGenerated() {
        String filePath = "META-INF/quickjs4j/Calculator_Builtins.mjs";
        InputStream is = getClass().getClassLoader().getResourceAsStream(filePath);
        assertNotNull(is, "Generated .mjs file should exist on classpath: " + filePath);

        String content = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))
                .lines()
                .collect(Collectors.joining("\n"));

        // Verify content contains expected function exports
        assertTrue(content.contains("export function javaMultiply"),
                ".mjs file should export javaMultiply function");
        assertTrue(content.contains("Calculator_Builtins"),
                ".mjs file should reference Calculator_Builtins global object");
    }

    @Test
    public void testBuiltinsDtsFileGenerated() {
        String filePath = "META-INF/quickjs4j/Calculator_Builtins.d.ts";
        InputStream is = getClass().getClassLoader().getResourceAsStream(filePath);
        assertNotNull(is, "Generated .d.ts file should exist on classpath: " + filePath);

        String content = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))
                .lines()
                .collect(Collectors.joining("\n"));

        // Verify content contains expected TypeScript definitions
        assertTrue(content.contains("export function javaMultiply"),
                ".d.ts file should declare javaMultiply function");
        assertTrue(content.contains("number"),
                ".d.ts file should contain TypeScript type annotations");
        assertTrue(content.contains("Generated by quarkus-quickjs4j"),
                ".d.ts file should have generation header comment");
    }
}
